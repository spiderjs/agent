syntax = "proto3";
package spiderjs;

message HttpHttpsReciver {
    string url                              = 1;
    string signKey                          = 2;
}


message Receiver {
    string oid                              = 1;
    enum Type {
        HTTP_HTTPS_RECIVER = 0;
    }

    Type type                               = 2;

    oneof config {
        HttpHttpsReciver httpHttpsReciver   = 3;
    }
}

message Executor {
    string oid = 1;
    string agent = 2;
    string script = 3;
    Receiver receiver = 4;
}

message Perf {
    string agent = 1;
    repeated string executors = 2;
    uint64 jobs = 3; // 启动后已经运行过的任务数量
    uint32 pending = 4; // 正在执行的任务数量
}

enum Code {
    SUCCESS = 0;
    INNER_ERROR = 1;
    SCRIPT_EXCEPTION = 3;
    RESOURCE_NOT_FOUND = 4;
    CANCELED = 5;
}

message Result {
    Code code = 1;
    string errmsg = 2;
}


message OnlineREQ {
    enum Event {
        EXECTUTOR_DEPLOYING = 0;
        EXECTUTOR_DEPLOY_COMPLETED = 1;
        PERF_UPDATE = 2;
        AGENT_ONLINE = 3;
        JOB_COMPLETED =4;
        EXECTUTOR_UNDEPLOYING = 5;
        EXECTUTOR_UNDEPLOY_COMPLETED = 6;
    }

    Event event = 1;

    string oid = 2;

    oneof evtargs {
        Perf perf = 3;
        Result result = 4;
        Job job =5;
    }
}

message Job {
    string oid = 1;
    string executor = 2;
    string args = 3;
    Result result = 4;
}

message Command {
    enum Event {
        DEPLOY_EXECUTOR = 0;
        UNDEPLOY_EXECUTOR = 1;
        ACCEPT_AGENT = 2;
        REJECT_AGENT =3;
        RUN_JOB = 4;
    }

    Event event = 1;

    oneof evtargs {
        Executor executor = 2;
        string oid = 3;
        Result result = 4;
        Job job = 5;
    }
}


message RunJobREQ {
    string oid = 1; // executor oid
    string args = 3;
}

// the agent watch dog
service WatchDog {
    rpc Online(stream OnlineREQ) returns (stream Command) {}
    // run job on spider instance
    rpc RunJob(RunJobREQ) returns (Result) {}
}
